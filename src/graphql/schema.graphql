input UserInputData {
    email: String!
    name: String!
    password: String!
}

type TimeRecord {
    id: ID!
    duration: Int!
    user: User!
    task: Task
    createdAt: String!
    updatedAt: String!
}

type Task {
    id: ID!
    title: String!
    user: User!
    isCompleted: Boolean!
    timeRecords: [TimeRecord!]!
    createdAt: String!
    updatedAt: String!
}

enum TimeFrames {
    MONTH
    WEEK
    DAY
}

type User {
    id: ID!
    name: String!
    email: String!
    password: String
    status: String!
    timeRecords: [TimeRecord!]!
    tasks(completed: Boolean = false, timeFrame: TimeFrames = DAY): [Task!]!
}

type AuthData {
    token: String!
    userId: String!
}

type RootQuery {
    login(email: String!, password: String!): AuthData!
    user: User!
    timeRecord(id: ID!): TimeRecord!
    task(id: ID!): Task!
}

type RootMutation {
    createUser(userInput: UserInputData!): User!
    updateStatus(status: String!): User!
    addTimeRecord(duration: Int!, taskId: ID): TimeRecord!
    updateTimeRecordDuration(timeRecordId: ID!, newDuration: Int!): TimeRecord!,
    assignTimeRecordToTask(timeRecordId: ID!, taskId: ID!): TimeRecord!
    addTask(title: String!): Task!
    completeTask(id: ID!): Task!
}

schema {
    query: RootQuery
    mutation: RootMutation
}
